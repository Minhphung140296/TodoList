{"version":3,"sources":["serviceWorker.js","Components/ListItem.js","TodoList.js","index.js"],"names":["Boolean","window","location","hostname","match","ListItem","props","ListItems","items","map","item","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","onClick","deleteItems","duration","easing","library","add","faTrash","TodoList","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mQAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,8ECdS,SAASC,EAASC,GAC7B,IACMC,GADQD,EAAME,OAAS,IACLC,KAAI,SAACC,GACzB,OAAQ,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KACpC,2BACI,2BAAOC,KAAK,OACRC,MAAOJ,EAAKK,KACZC,GAAIN,EAAKE,IACTK,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAON,MAAOJ,EAAKE,QAEjD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAK,QACtCC,QAAS,kBAAMhB,EAAMiB,YAAYb,EAAKE,cAO1D,OACI,6BACI,kBAAC,IAAD,CAAUY,SAAU,IAAKC,OAAO,eAC3BlB,I,mBCvBjBmB,IAAQC,IAAIC,K,IAgFGC,E,kDA9EX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDwB,MAAQ,CACTtB,MAAO,GACPuB,YAAa,CACThB,KAAM,GACNH,IAAK,KAGb,EAAKoB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKV,YAAc,EAAKA,YAAYU,KAAjB,gBACnB,EAAKd,UAAY,EAAKA,UAAUc,KAAf,gBAZF,E,wDAePf,GACRiB,KAAKC,SAAS,CACVL,YAAa,CACThB,KAAMG,EAAEE,OAAON,MACfF,IAAKyB,KAAKC,W,8BAKdpB,GACJA,EAAEqB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACI,KAAZA,EAAgB,CAChB,IAAMG,EAAQ,sBAAOR,KAAKL,MAAMtB,OAAlB,CAAyBgC,IACvCL,KAAKC,SAAS,CACV5B,MAAOmC,EACPZ,YAAa,CACThB,KAAM,GACNH,IAAK,S,kCAMTA,GACR,IAAMgC,EAAgBT,KAAKL,MAAMtB,MAAMqC,QAAO,SAACnC,GAAD,OAC1CA,EAAKE,MAAOA,KACZuB,KAAKC,SAAS,CACV5B,MAAOoC,M,gCAGT7B,EAAMH,GACZ,IAAMF,EAAOyB,KAAKL,MAAMtB,MACxBE,EAAKD,KAAI,SAACC,GACHA,EAAKE,MAAQA,IACZF,EAAKK,KAAOA,MAGpBoB,KAAKC,SAAS,CACV5B,MAAME,M,+BAIV,OACI,yBAAKC,UAAU,OACX,gCACI,0BAAMK,GAAG,YAAY8B,SAAUX,KAAKD,SAChC,2BAAOrB,KAAK,OAAOkC,YAAY,aAC3BjC,MAAOqB,KAAKL,MAAMC,YAAYhB,KAC9BE,SAAUkB,KAAKH,cAEnB,4BAAQnB,KAAK,UAAb,QAEJ,kBAAC,EAAD,CAAUL,MAAO2B,KAAKL,MAAMtB,MACpBe,YAAeY,KAAKZ,YACpBJ,UAAWgB,KAAKhB,kB,GAxErB6B,IAAMC,WCA7BC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.a1e11ee6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport \"./ListItem.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\nexport default function ListItem(props) {\n    const items = props.items || [];\n    const ListItems = items.map((item) => {\n        return (<div className=\"list\" key={item.key}>\n            <p>\n                <input type=\"text\"\n                    value={item.text}\n                    id={item.key}\n                    onChange={\n                        (e) => {\n                            props.setUpdate(e.target.value, item.key)\n                        }} />\n                <span>\n                    <FontAwesomeIcon className=\"faicons\" icon=\"trash\"\n                        onClick={() => props.deleteItems(item.key)}\n                    />\n                </span>\n            </p>\n        </div>);\n    });\n\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n                {ListItems}\n            </FlipMove>\n\n        </div>\n    );\n}\n","import React from 'react';\nimport \"./App.css\";\nimport ListItem from './Components/ListItem';\nimport {library} from '@fortawesome/fontawesome-svg-core';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\nlibrary.add(faTrash); \nclass TodoList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            currentItem: {\n                text: '',\n                key: ''\n            }\n        }\n        this.handleInput = this.handleInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItems = this.deleteItems.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n\n    }\n    handleInput(e) {\n        this.setState({\n            currentItem: {\n                text: e.target.value,\n                key: Date.now()\n            }\n\n        });\n    }\n    addItem(e) {\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        console.log(newItem);\n        if (newItem !== \"\") {\n            const newItems = [...this.state.items, newItem];\n            this.setState({\n                items: newItems,\n                currentItem: {\n                    text: '',\n                    key: ''\n                }\n            });\n        }\n    }\n\n    deleteItems(key){\n        const filteredItems = this.state.items.filter((item) =>\n            item.key !==key);\n            this.setState({\n                items: filteredItems\n            })\n    }\n    setUpdate(text, key){\n        const item = this.state.items;\n        item.map((item)=>{\n            if(item.key === key){\n                item.text = text;\n            }\n        })\n        this.setState({\n            items:item\n        })\n    }\n    render() {\n        return (\n            <div className=\"App\">\n                <header>\n                    <form id=\"todo-list\" onSubmit={this.addItem}>\n                        <input type=\"text\" placeholder=\"Enter test\"\n                            value={this.state.currentItem.text}\n                            onChange={this.handleInput}\n                        />\n                        <button type=\"Submit\">Add</button>\n                    </form>\n                    <ListItem items={this.state.items}\n                            deleteItems = {this.deleteItems}\n                            setUpdate={this.setUpdate}\n                    />\n                </header>\n            </div>\n        )\n    }\n}\nexport default TodoList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport TodoList from './TodoList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
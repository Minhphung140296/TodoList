{"version":3,"sources":["serviceWorker.js","Components/ListItem.js","firebaseconfig.js","TodoList_firebase.js","index.js"],"names":["Boolean","window","location","hostname","match","ListItem","props","ListItems","items","map","item","className","key","type","value","text","id","onChange","e","setUpdate","target","icon","faTrash","onClick","deleteItems","duration","easing","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Firebase","firebase","initializeApp","db","firestore","TodoList_Firebase","_retrieveData","a","data","collection","get","forEach","console","log","push","setState","isLoading","state","writeUserData","add","then","ref","DeletePost","database","remove","currentItem","handleInput","bind","addItem","this","Date","now","preventDefault","newItem","newItems","filteredItems","filter","init","to","process","onSubmit","placeholder","React","Component","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d4694cbb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport \"./ListItem.css\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport FlipMove from 'react-flip-move';\nimport {faTrash} from '@fortawesome/free-solid-svg-icons';\n\nexport default function ListItem(props) {\n    const items = props.items || [];\n    const ListItems = items.map((item) => {\n        return (<div className=\"list\" key={item.key}>\n            <p>\n                <input type=\"text\"\n                    value={item.text}\n                    id={item.key}\n                    onChange={\n                        (e) => {\n                            props.setUpdate(e.target.value, item.key)\n                        }} />\n                <span>\n                    <FontAwesomeIcon className=\"faicons\"\n                    icon={faTrash}\n                        onClick={() => props.deleteItems(item.key)}\n                    />\n                </span>\n            </p>\n        </div>);\n    });\n\n    return (\n        <div>\n            <FlipMove duration={500} easing=\"ease-in-out\">\n                {ListItems}\n            </FlipMove>\n\n        </div>\n    );\n}\n","// import * as firebase from 'firebase';\n// // Your web app's Firebase configuration\n// var firebaseConfig = {\n//     apiKey: \"AIzaSyDtrR3M7mxADUHivZJukunLV8jX_yStbl8\",\n//     authDomain: \"todolist-1b512.firebaseapp.com\",\n//     databaseURL: \"https://todolist-1b512.firebaseio.com\",\n//     projectId: \"todolist-1b512\",\n//     storageBucket: \"todolist-1b512.appspot.com\",\n//     messagingSenderId: \"210249927506\",\n//     appId: \"1:210249927506:web:4ad59f9f60affb034ac88b\",\n//     measurementId: \"G-8999YP0SHT\"\n// };\n// // Initialize Firebase\n// firebase.initializeApp(firebaseConfig);\n// firebase.analytics();\n\n\n\nimport firebase from 'firebase';\nimport 'firebase/firestore';\n\n// chỗ này khai báo thông tin kết nối Firebase \nvar firebaseConfig = {\n    apiKey: \"AIzaSyDtrR3M7mxADUHivZJukunLV8jX_yStbl8\",\n    authDomain: \"todolist-1b512.firebaseapp.com\",\n    databaseURL: \"https://todolist-1b512.firebaseio.com\",\n    projectId: \"todolist-1b512\",\n    storageBucket: \"todolist-1b512.appspot.com\",\n    messagingSenderId: \"210249927506\",\n    appId: \"1:210249927506:web:4ad59f9f60affb034ac88b\",\n    measurementId: \"G-8999YP0SHT\"\n};\n\nexport default class Firebase {\n  static db;\n\n  static init() {\n    firebase.initializeApp(firebaseConfig);\n    Firebase.db = firebase.firestore();\n  }\n}","import React from 'react';\nimport \"./App.css\";\nimport ReactDOM from 'react-dom';\nimport ListItem from './Components/ListItem';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\nimport firebase from './firebaseconfig';\n\nclass TodoList_Firebase extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            items: [],\n            currentItem: {\n                text: '',\n                key: ''\n            }\n        }\n        this.handleInput = this.handleInput.bind(this);\n        this.addItem = this.addItem.bind(this);\n        this.deleteItems = this.deleteItems.bind(this);\n        this.setUpdate = this.setUpdate.bind(this);\n\n    }\n\n    _retrieveData = async () => {\n        let data = [];\n        let query = await firebase.db.collection('test').get();\n        query.forEach(item => {\n            console.log(\"item logggggg\"); \n            console.log(item); \n            data.push({\n                text: item.data().text,\n                key: item.data().key\n            });\n        });\n        this.setState({ items: data, isLoading: false }, () => console.log(this.state.items));\n        console.log(' dữ liệu từ firebase:');\n        console.log(this.state.items);\n    };\n\n    writeUserData = (key, text) => {\n        // id cho minh set up\n\n        // firebase.db.collection('test').doc('new-city-id/').set({\n        //     key: key,\n        //     text: text\n        // });\n\n        // id tu sinh ra\n\n        // firebase.db.collection('test').add({\n        //     key: key,\n        //     text: text \n        // });\n\n        // Add a new document with a generated id.\n        firebase.db.collection('test').add({\n            key: key,\n            text: text\n        }).then(ref => { // ref là docid tự sinh ra, trả về lai cho mình, o thay đổi được\n            console.log('Added document with ID: ', ref.id);\n        });\n\n\n    }\n\n    handleInput(e) {\n        this.setState({\n            currentItem: {\n                text: e.target.value,\n                key: Date.now()\n            }\n\n        });\n    }\n\n    addItem(e) {\n        e.preventDefault();\n        const newItem = this.state.currentItem;\n        console.log(newItem);\n        if (newItem !== \"\") {\n            const newItems = [...this.state.items, newItem];\n            this.setState({\n                items: newItems,\n                currentItem: {\n                    text: '',\n                    key: ''\n                }\n            });\n            // thêm data lên firestone \n            this.writeUserData(newItem.key, newItem.text)\n        }\n    }\n\n    deleteItems(key) {\n        const filteredItems = this.state.items.filter((item) =>\n            item.key !== key);\n        this.setState({\n            items: filteredItems\n        })\n    }\n\n    DeletePost = () =>{\n        firebase.database().ref('test/key').remove()   \n    }\n\n    setUpdate(text, key) {\n        const items = this.state.items;\n        items.map((item) => {\n            if (item.key === key) {\n                item.text = text;\n            }\n        })\n        this.setState({\n            items: items\n        })\n    }\n\n\n\n    // chương trình bắt đầu sẽ load chỗ này đầu tiên\n    componentDidMount() {\n        firebase.init();\n        this._retrieveData();\n    }\n\n    render() {\n        return (\n            <div className=\"App\" to={process.env.PUBLIC_URL}>\n                <header>\n                    <form id=\"todo-list\" onSubmit={this.addItem}>\n                        <input type=\"text\" placeholder=\"Enter test\"\n                            value={this.state.currentItem.text}\n                            onChange={this.handleInput}\n                        />\n                        <button type=\"Submit\">Add</button>\n                    </form>\n                    <ListItem items={this.state.items}\n                        deleteItems={this.deleteItems}\n                        setUpdate={this.setUpdate}\n                    />\n                </header>\n            </div>\n        )\n    }\n}\nexport default TodoList_Firebase;","import React from 'react';\nimport './index.css';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport TodoList_Firebase from './TodoList_firebase';\nimport { BrowserRouter as Router } from 'react-router-dom';\nReactDOM.render(<Router basename={process.env.PUBLIC_URL}>< TodoList_Firebase /></Router>, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}